{"version":3,"sources":["app/common/form/TextInput/TextInput.js","features/auth/Login/LoginPage.js","features/auth/authActions.js","features/async/asyncActions.js","features/async/asyncConstants.js","features/auth/authConstants.js","features/dashboard/DashboardNav/DashboardNav.js","app/layout/LoadingComponent.js","features/dashboard/ClientDetail/ClientDetail.js","features/dashboard/dashboardActions.js","features/dashboard/dashboardConstants.js","features/dashboard/TransactionList/TransactionList.js","features/dashboard/TransactionDetail/TransactionDetail.js","features/dashboard/DashboardHome/DashboardHome.js","app/layout/App.js","app/common/util/reducerUtil.js","features/auth/authReducer.js","features/async/asyncReducer.js","features/dashboard/dashboardReducer.js","app/reducers/rootReducer.js","serviceWorker.js","index.js","app/store/configureStore.js"],"names":["TextInput","_ref","input","width","type","placeholder","_ref$meta","meta","touched","error","react_default","a","createElement","Form","Field","Object","assign","Label","basic","color","actions","login","creds","history","asyncToGenerator","regenerator_default","mark","_callee","dispatch","getState","response","body","wrap","_context","prev","next","fetch","method","headers","Content-Type","JSON","stringify","email","password","sent","json","localStorage","setItem","token","payload","push","t0","console","log","stop","_x","_x2","apply","this","arguments","LoginPage","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this$props","props","handleSubmit","Container","className","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","Image","src","size","onSubmit","Segment","name","component","Button","fluid","Component","withRouter","connect","reduxForm","form","DashboardNav","Menu","Item","NavLink","to","position","LoadingComponent","inverted","Dimmer","active","Loader","content","getClientDetail","transactionId","_ref2","_callee2","_context2","Authorization","getItem","_x3","_x4","ClientDetail","state","client","loading","match","params","id","nextProps","setState","customerInfo","_this$state","Fragment","layout_LoadingComponent","centered","Icon","Content","Subheader","Group","billingFirstName","billingLastName","billingState","columns","icon","shippingAddress1","shippingAddress2","shippingCity","shippingCountry","shippingPostcode","number","expiryMonth","expiryYear","dashboard","currentClient","fetchTransaction","fromDate","toDate","TransactionList","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","transactions","_componentDidMount","Table","celled","Row","HeaderCell","Body","map","transaction","index","Cell","react_router_dom","merchant","fx","convertedAmount","convertedCurrency","async","getTransactionDetail","_ref3","_callee3","_context3","_x5","_x6","TransactionDetail","fxTransactionId","referenceNo","operation","status","originalAmount","originalCurrency","currentTransaction","DashboardHome","stackable","DashboardNav_DashboardNav","react_router","exact","from","path","render","dashboard_TransactionList_TransactionList","App","createReducer","initialState","fnMap","undefined","handler","currentUser","authenticated","defineProperty","objectSpread","_createReducer","transactionDetail","dashboardReducer_createReducer","data","rootReducers","combineReducers","FormReducer","auth","authReducer","asyncReducer","dashboardReducer","Boolean","window","location","hostname","store","preloadedState","middlewares","thunk","storeEnhancers","applyMiddleware","composedEnhancer","composeWithDevTools","createStore","rootReducer","configureStore","rootEl","document","getElementById","ReactDOM","es","layout_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8764d65d.chunk.js","sourcesContent":["import React from 'react'\nimport { Form, Label } from 'semantic-ui-react'\n\nconst TextInput = ({input, width, type, placeholder, meta:{touched, error}}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n        <input {...input} placeholder={placeholder} type={type}/>\n        {touched && error && <Label basic color='red'>{error}</Label>}\n    </Form.Field>\n  )\n}\n\nexport default TextInput","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Grid, Header, Form, Segment, Button, Label, Image } from 'semantic-ui-react';\nimport { Field, reduxForm } from 'redux-form';\nimport TextInput from '../../../app/common/form/TextInput/TextInput';\nimport { login } from '../authActions'\nimport { withRouter } from 'react-router-dom'\n\nconst actions = {\n    login\n}\n\nexport class LoginPage extends Component {\n  render() {\n    const {login, handleSubmit, error, history} = this.props;\n    return (\n      <Container className='main'>\n        <Grid textAlign='center' style={{ height: '100%' }} verticalAlign='middle'>\n          <Grid.Column style={{ maxWidth: 450 }}>\n            <Header as='h2' color='red' textAlign='center'>\n            <Image style={{height:'80px', width: '250px'}} src='assets/financial-house-logo.png' />\n            </Header>\n            <Form error size=\"large\" onSubmit={handleSubmit(() => login(history))}>\n              <Segment>\n                <h2>Log-in to your account</h2>\n                <Field\n                  name=\"email\"\n                  component={TextInput}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n                />\n                <Field\n                  name=\"password\"\n                  component={TextInput}\n                  type=\"password\"\n                  placeholder=\"password\"\n                />\n                {error && <Label basic color='red'>{error}</Label>}\n                <Button fluid size=\"large\" color=\"red\" className=\"btn-login\">\n                  Login\n                </Button>\n              </Segment>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(connect(null,actions)(reduxForm({form: 'loginForm'})(LoginPage)));\n","import { asyncActionStart, asyncActionFinish, asyncActionError } from '../async/asyncActions'\nimport { LOGIN_USER } from './authConstants'\n\nexport const login = (creds,history) => {\n    return async (dispatch, getState) => {\n      try {\n        dispatch(asyncActionStart())\n        // const config = {\n        //   method: 'POST',\n        //   headers: {\n        //     \"Content-Type\": \"application/json\",\n        //   },\n        //   body: JSON.stringify({email:creds.login,password:creds.password}), \n        // };\n\n        // await fetch('/api/v3/merchant/user/login', config)\n\n\n\n\n\n        const response = await fetch('/api/v3/merchant/user/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({email:creds.email,password:creds.password})\n        });\n        const body = await response.json();\n        localStorage.setItem('access_token', body.token);\n        dispatch({type: LOGIN_USER,payload: {body}})\n        history.push('dashboard')\n        dispatch(asyncActionFinish())\n      } catch(error){\n        dispatch(asyncActionError())\n        console.log(error);\n      }\n    }\n};\n\n","import { ASYNC_ACTION_START, ASYNC_ACTION_FINISH, ASYNC_ACTION_ERROR } from './asyncConstants'\n\nexport const asyncActionStart = () => {\n    return {\n        type: ASYNC_ACTION_START\n    }\n}\n\nexport const asyncActionFinish = () => {\n    return {\n        type: ASYNC_ACTION_FINISH\n    }\n}\n\nexport const asyncActionError = () => {\n    return {\n        type: ASYNC_ACTION_ERROR\n    }\n}","export const ASYNC_ACTION_START = 'ASYNC_ACTION_START'\nexport const ASYNC_ACTION_FINISH = 'ASYNC_ACTION_FINISH'\nexport const ASYNC_ACTION_ERROR = 'ASYNC_ACTION_ERROR'","export const LOGIN_USER = 'LOGIN_USER' \n","import React from 'react'\nimport { Menu, Image } from 'semantic-ui-react'\nimport { NavLink } from 'react-router-dom'\n\nfunction DashboardNav() {\n  return (\n    <Menu>\n      <Menu.Item><Image src='/assets/financial-house-logo.png' style={{width: '150px'}} /></Menu.Item>\n      <Menu.Item as={NavLink} to='/dashboard/transactions'>Transactions</Menu.Item>\n      <Menu.Item position='right' as={NavLink} to='/login'>Logout</Menu.Item>\n    </Menu>\n  )\n}\n\nexport default DashboardNav\n","import React from 'react'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\nconst LoadingComponent = ({inverted}) => {\n  return (\n    <Dimmer inverted={inverted} active={true}>\n        <Loader content= 'Loading data, please wait...' />\n    </Dimmer>\n  )\n}\n\nexport default LoadingComponent","import React, {Component} from 'react';\nimport { Grid, Header, Item, Segment, Icon} from \"semantic-ui-react\";\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getClientDetail } from '../dashboardActions'\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n\n\nconst actions = {\n    getClientDetail\n}\n\nconst mapState = (state) => ({\n    client : state.dashboard.currentClient\n})\n\nclass ClientDetail extends Component {\n    state = {\n        client : {},\n        loading: true\n    }\n    async componentDidMount(){\n        const transactionId = this.props.match.params.id;\n        await this.props.getClientDetail(transactionId);\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            client:nextProps.client.customerInfo,\n            loading: nextProps.loading\n        })\n    }\n\n    render() {\n        const {client, loading} = this.state;\n        return (\n            <React.Fragment>\n                {loading && <LoadingComponent inverted={true} />}\n                <Grid centered>\n                    <Grid.Column width={14}>\n                        <Header as='h2'>\n                            <Icon name='list' />\n                            <Header.Content>\n                                Client Details\n                                <Header.Subheader>You can see client details here.</Header.Subheader>\n                            </Header.Content>\n                        </Header>\n                        <Segment>\n                            <Item.Group>\n                                <Item>\n                                    <Item.Content verticalAlign='bottom'>\n                                        <Header as='h1'>{client.billingFirstName} {client.billingLastName}</Header>\n                                        <br/>\n                                        <Header as='h3'>{client.email}</Header>\n                                        <br/>\n                                        <Header as='h3'>{client.billingState}</Header>\n                                    </Item.Content>\n                                </Item>\n                            </Item.Group>\n                        </Segment>\n                    </Grid.Column>\n                    <Grid.Column width={14}>\n                        <Segment>\n                            <Grid columns={2}>\n                                <Grid.Column width={8}>\n                                    <Header icon='shipping' content='Shipping Details'/>\n                                    <p>Address: <strong>{client.shippingAddress1} {client.shippingAddress2}</strong></p>\n                                    <p>Shipping City <strong>{client.shippingCity}</strong></p>\n                                    <p>Shipping Country: <strong>{client.shippingCountry}</strong></p>\n                                    <p>Shipping Post Code: <strong>{client.shippingPostcode}</strong></p>\n                                </Grid.Column>\n                                <Grid.Column width={8}>\n                                    <Header icon='payment' content='Card Details'/>\n                                    <p>Card number: <strong>{client.number}</strong></p>\n                                    <p>Expiry Month: <strong>{client.expiryMonth}</strong></p>\n                                    <p>Expiry Year: <strong>{client.expiryYear}</strong></p>\n                                </Grid.Column>\n                            </Grid>\n                        </Segment>\n                    </Grid.Column>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(connect(mapState,actions)(ClientDetail));","import { FETCH_TRANSACTIONS, FETCH_CLIENT, FETCH_TRANSACTION_DETAIL } from './dashboardConstants'\nimport { asyncActionStart, asyncActionFinish, asyncActionError } from '../async/asyncActions'\n\nexport const fetchTransaction = () => {\n    return async (dispatch, getState) => {\n      try {\n        dispatch(asyncActionStart())\n        const response = await fetch('/api/v3/transaction/list', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': localStorage.getItem('access_token')\n          },\n          body: JSON.stringify({\"fromDate\": \"2011-07-01\",\"toDate\": \"2019-08-01\"})\n        });\n        const body = await response.json();\n        dispatch({type: FETCH_TRANSACTIONS,payload: {body}})\n        dispatch(asyncActionFinish())\n      } catch(error){\n        dispatch(asyncActionError())\n        console.log(error);\n      }\n    }\n};\n\nexport const getClientDetail = (transactionId) => {\n    return async (dispatch,getState) => {\n        try{\n            dispatch(asyncActionStart())\n            const response = await fetch('/api/v3/client', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': localStorage.getItem('access_token')\n                },\n                body: JSON.stringify({\"transactionId\": transactionId})\n              });\n              const body = await response.json();\n              dispatch({type: FETCH_CLIENT,payload: {body}})\n\n            dispatch(asyncActionFinish())\n        } catch(error){\n            dispatch(asyncActionError())\n            console.log(error);\n        }\n    }\n};\n\nexport const getTransactionDetail = (transactionId) => {\n    return async (dispatch,getState) => {\n        try{\n            dispatch(asyncActionStart())\n            const response = await fetch('/api/v3/transaction', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': localStorage.getItem('access_token')\n                },\n                body: JSON.stringify({\"transactionId\": transactionId})\n              });\n              const body = await response.json();\n              dispatch({type: FETCH_TRANSACTION_DETAIL,payload: {body}})\n\n            dispatch(asyncActionFinish())\n        } catch(error){\n            dispatch(asyncActionError())\n            console.log(error);\n        }\n    }\n};","export const FETCH_TRANSACTIONS = 'FETCH_TRANSACTIONS' \nexport const FETCH_CLIENT = 'FETCH_CLIENT' \nexport const FETCH_TRANSACTION_DETAIL = 'FETCH_TRANSACTION_DETAIL' \n","import React, { Component } from 'react'\nimport { Grid, Table } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { fetchTransaction } from '../dashboardActions'\nimport { Link } from 'react-router-dom';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n\nconst actions = {\n    fetchTransaction\n}\n\nconst mapState = (state) => ({\n    transactions : state.dashboard.transactions,\n    loading: state.async.loading\n})\n\nexport class TransactionList extends Component {\n  state = {\n      transactions : [],\n      loading: true\n  }\n  async componentDidMount(){ \n    await this.props.fetchTransaction();\n  }\n\n  componentWillReceiveProps(nextProps){\n      this.setState({\n        transactions:nextProps.transactions,\n        loading: nextProps.loading\n      })\n  }\n  \n  render() {\n    const {transactions, loading} = this.state;\n\n    return (\n        <React.Fragment>\n            {loading && <LoadingComponent inverted={true} />}\n            <Grid centered>\n                <Grid.Column width={14}>\n                    <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                        <Table.HeaderCell>Client Name</Table.HeaderCell>\n                        <Table.HeaderCell>Transaction Id</Table.HeaderCell>\n                        <Table.HeaderCell>Converted Amount</Table.HeaderCell>\n                        <Table.HeaderCell>Currency</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {transactions.length > 0 && transactions.map((transaction,index) => (\n                            <Table.Row key={index}>\n                                <Table.Cell>\n                                    <Link to={`/dashboard/client-detail/${transaction.transaction.merchant.transactionId}`}>\n                                        {transaction.customerInfo.billingFirstName} {transaction.customerInfo.billingLastName}\n                                    </Link>\n                                </Table.Cell>\n                                <Table.Cell>\n                                    <Link to={`/dashboard/transaction-detail/${transaction.transaction.merchant.transactionId}`}>\n                                        {transaction.transaction.merchant.transactionId}\n                                    </Link>\n                                </Table.Cell>\n                                <Table.Cell>{transaction.fx.merchant.convertedAmount}</Table.Cell>\n                                <Table.Cell>{transaction.fx.merchant.convertedCurrency}</Table.Cell>\n                            </Table.Row>\n                        ))}\n                    </Table.Body>\n                    </Table>\n                </Grid.Column>\n            </Grid>\n        </React.Fragment>\n      )\n  }\n}\n\nexport default connect(mapState,actions)(TransactionList)\n\n","import React, {Component} from 'react';\nimport { Grid, Header, Item, Segment, Icon } from \"semantic-ui-react\";\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getTransactionDetail } from '../dashboardActions'\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n\nconst actions = {\n  getTransactionDetail\n}\n\nconst mapState = (state) => ({\n  transaction : state.dashboard.currentTransaction\n})\n\nexport class TransactionDetail extends Component {\n  state = {\n    transaction : {},\n    loading: true\n  }\n  async componentDidMount(){ \n    const transactionId = this.props.match.params.id;\n    await this.props.getTransactionDetail(transactionId);\n  }\n\n  componentWillReceiveProps(nextProps){\n      this.setState({\n        transaction:nextProps.transaction,\n        loading: nextProps.loading\n      })\n  }\n  render() {\n    const {transaction, loading} = this.state;\n\n    return (\n      <React.Fragment>\n        {loading && <LoadingComponent inverted={true} />}\n        <Grid centered>\n        <Grid.Column width={14}>\n            <Header as='h2'>\n              <Icon name='list' />\n              <Header.Content>\n                Transaction Details\n                <Header.Subheader>You can see transaction details here.</Header.Subheader>\n              </Header.Content>\n            </Header>\n            <Segment>\n                <Item.Group>\n                  {transaction.customerInfo && \n                    <Item>\n                        <Item.Content verticalAlign='bottom'>\n                            <Header as='h1'>{transaction.customerInfo.billingFirstName} {transaction.customerInfo.billingLastName}</Header>\n                            <br/>\n                            <Header as='h3'>{transaction.customerInfo.email}</Header>\n                            <br/>\n                            <Header as='h3'>{transaction.customerInfo.billingState}</Header>\n                        </Item.Content>\n                    </Item>}\n                </Item.Group>\n            </Segment>\n        </Grid.Column>\n        <Grid.Column width={14}>\n              <Segment>\n                  <Grid columns={2}>\n                      {transaction.transaction &&\n                      <Grid.Column width={8}>\n                          <Header icon='list' content='Transaction Details'/>\n                          <p>Transaction Id: <strong>{transaction.transaction.merchant.transactionId}</strong></p>\n                          <p>Fx TransactionId: <strong>{transaction.transaction.merchant.fxTransactionId}</strong></p>\n                          <p>ReferenceNo: <strong>{transaction.transaction.merchant.referenceNo}</strong></p>\n                          <p>Operation: <strong>{transaction.transaction.merchant.operation}</strong></p>\n                          <p>Status: <strong>{transaction.transaction.merchant.status}</strong></p>\n                          <p>Type: <strong>{transaction.transaction.merchant.type}</strong></p>\n                      </Grid.Column>}\n                      {transaction.fx &&\n                      <Grid.Column width={8}>\n                          <Header content='Fx Details'/>\n                          <p>Original Amount: <strong>{transaction.fx.merchant.originalAmount}</strong></p>\n                          <p>Original Currency: <strong>{transaction.fx.merchant.originalCurrency}</strong></p>\n                      </Grid.Column>}\n                  </Grid>\n              </Segment>\n          </Grid.Column>\n      </Grid>\n      </React.Fragment>\n\n    )\n  }\n}\n\nexport default withRouter(connect(mapState,actions)(TransactionDetail));\n","import React from 'react'\nimport { Grid } from 'semantic-ui-react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport DashboardNav from '../DashboardNav/DashboardNav'\nimport ClientDetail from '../ClientDetail/ClientDetail';\nimport TransactionList from '../TransactionList/TransactionList';\nimport TransactionDetail from '../TransactionDetail/TransactionDetail';\n\n\nconst DashboardHome = () => {\n  return (\n    <React.Fragment>\n      <Grid stackable centered>\n        <Grid.Column width={16}>\n          <DashboardNav/>\n        </Grid.Column>\n      </Grid>\n      <Switch>\n        <Redirect exact from='/dashboard' to='dashboard/home'/>\n        <Route path='/dashboard/home' render={() => <TransactionList />}/>\n        <Route path='/dashboard/client-detail/:id' component={ClientDetail}/>\n        <Route path='/dashboard/transaction-detail/:id' component={TransactionDetail}/>\n        <Route path='/dashboard/transactions' render={() => <TransactionList />}/>\n      </Switch>\n    </React.Fragment>\n  )\n}\n\nexport default DashboardHome\n","import React, { Component } from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\n\nimport LoginPage from '../../features/auth/Login/LoginPage'\nimport DashboardHome from '../../features/dashboard/DashboardHome/DashboardHome';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path='/' component={LoginPage}/>\n        </Switch>\n\n        <Route \n          path=\"/(.+)\"\n          render ={() => (\n            <div>\n                <Switch>\n                  <Route path='/login' component={LoginPage}/>\n                  <Route path='/dashboard' component={DashboardHome}/>\n                </Switch>\n            </div>\n          )}\n          />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);","export const createReducer = (initialState,fnMap) => {\n    return(state=initialState, {type,payload}) => {\n        const handler = fnMap[type];\n        return handler ? handler(state,payload): state;\n    }\n}","import { LOGIN_USER } from './authConstants'\nimport { createReducer } from '../../app/common/util/reducerUtil'\n\nconst initialState = {\n    currentUser: {\n       token: localStorage.getItem('access_token')  \n    },\n    authenticated: false,\n}\n\nexport const loginUser = (state,payload) => {\n    return {\n        ...state,\n        authenticated: true,\n        currentUser: payload.body\n    }\n}\n\nexport default createReducer(initialState, {\n    [LOGIN_USER] : loginUser\n})","import { createReducer } from '../../app/common/util/reducerUtil'\nimport { ASYNC_ACTION_START, ASYNC_ACTION_FINISH, ASYNC_ACTION_ERROR } from './asyncConstants'\n\nconst initialState = {\n    loading: false\n}\n\nexport const asyncActionStarted = (state) => {\n    return {...state, loading: true}\n}\n\nexport const asyncActionFinished = (state) => {\n    return {...state, loading: false}\n}\n\nexport const asyncActionError = (state) => {\n    return {...state, loading: false}\n}\n\n\nexport default createReducer(initialState, {\n    [ASYNC_ACTION_START]: asyncActionStarted,\n    [ASYNC_ACTION_FINISH]: asyncActionFinished,\n    [ASYNC_ACTION_ERROR]: asyncActionError,\n})","import { FETCH_TRANSACTIONS, FETCH_CLIENT, FETCH_TRANSACTION_DETAIL } from './dashboardConstants'\nimport { createReducer } from '../../app/common/util/reducerUtil'\n\nconst initialState = {\n    transactions: [],\n    client : {},\n    transactionDetail: {}\n}\n\nexport const fetchTransactions = (state,payload) => {\n    return {\n        ...state,\n        transactions: payload.body.data\n    }\n}\n\nexport const fetchClient = (state,payload) => {\n    return {\n        ...state,\n        currentClient: payload.body\n    }\n}\n\nexport const fetchTransactionDetail = (state,payload) => {\n    return {\n        ...state,\n        currentTransaction: payload.body\n    }\n}\n\nexport default createReducer(initialState, {\n    [FETCH_TRANSACTIONS] : fetchTransactions,\n    [FETCH_CLIENT] : fetchClient,\n    [FETCH_TRANSACTION_DETAIL] : fetchTransactionDetail\n})\n","import { combineReducers } from 'redux'\nimport { reducer as FormReducer } from 'redux-form'\nimport authReducer from '../../features/auth/authReducer'\nimport asyncReducer from '../../features/async/asyncReducer'\nimport dashboardReducer from '../../features/dashboard/dashboardReducer'\n\nconst rootReducers = combineReducers({\n    form: FormReducer,\n    auth: authReducer,\n    async: asyncReducer,\n    dashboard: dashboardReducer\n});\n\nexport default rootReducers;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './app/layout/App';\nimport {configureStore} from './app/store/configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\nconst rootEl = document.getElementById('root');\n\nlet render = () =>{\n    ReactDOM.render(\n    <Provider store={store}>    \n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>, \n    rootEl);\n}\n\nif(module.hot){\n    module.hot.accept('./app/layout/App',() => {\n        setTimeout(render);\n    })\n}\n\nrender();\n\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux'\nimport rootReducer from '../reducers/rootReducer'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\n\n\n\nexport const configureStore = (preloadedState) =>{\n    const middlewares = [thunk];\n    const middlewareEnhancer = applyMiddleware(...middlewares);\n\n    const storeEnhancers = [middlewareEnhancer];\n\n    const composedEnhancer = composeWithDevTools(\n        ...storeEnhancers)\n\n    const store = createStore(\n        rootReducer,\n        preloadedState,\n        composedEnhancer\n    )\n\n    if(process.env.NODE_ENV !== 'production'){\n        if(module.hot){\n            module.hot.accept('../reducers/rootReducer', () => {\n                const newRootReducer = require('../reducers/rootReducer').default;\n                store.replaceReducer(newRootReducer);\n            })\n        }\n    }\n\n    return store;\n}"],"sourceRoot":""}